<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: query.proto

namespace Io\Axoniq\Axonserver\Grpc\Query;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Message describing possible interactions for a Subscription Query 
 *
 * Generated from protobuf message <code>io.axoniq.axonserver.grpc.query.SubscriptionQueryRequest</code>
 */
class SubscriptionQueryRequest extends \Google\Protobuf\Internal\Message
{
    protected $request;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery $subscribe
     *           Start a Subscription Query with the given details. 
     *     @type \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery $unsubscribe
     *           Ends a previously started Subscription Query with the given details 
     *     @type \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery $get_initial_result
     *           Requests the initial result of a subscription query to be sent. This should always be done after opening the
     *          subscription query itself, to remove concurrency conflicts with Update messages.
     *     @type \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery $flow_control
     *           Allows the Server to provide additional Updates to be sent. Only the `number_of_permits` field needs to be
     *          set on this message.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Query::initOnce();
        parent::__construct($data);
    }

    /**
     * Start a Subscription Query with the given details. 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.query.SubscriptionQuery subscribe = 1;</code>
     * @return \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery
     */
    public function getSubscribe()
    {
        return $this->readOneof(1);
    }

    /**
     * Start a Subscription Query with the given details. 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.query.SubscriptionQuery subscribe = 1;</code>
     * @param \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery $var
     * @return $this
     */
    public function setSubscribe($var)
    {
        GPBUtil::checkMessage($var, \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Ends a previously started Subscription Query with the given details 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.query.SubscriptionQuery unsubscribe = 2;</code>
     * @return \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery
     */
    public function getUnsubscribe()
    {
        return $this->readOneof(2);
    }

    /**
     * Ends a previously started Subscription Query with the given details 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.query.SubscriptionQuery unsubscribe = 2;</code>
     * @param \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery $var
     * @return $this
     */
    public function setUnsubscribe($var)
    {
        GPBUtil::checkMessage($var, \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Requests the initial result of a subscription query to be sent. This should always be done after opening the
     *subscription query itself, to remove concurrency conflicts with Update messages.
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.query.SubscriptionQuery get_initial_result = 3;</code>
     * @return \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery
     */
    public function getGetInitialResult()
    {
        return $this->readOneof(3);
    }

    /**
     * Requests the initial result of a subscription query to be sent. This should always be done after opening the
     *subscription query itself, to remove concurrency conflicts with Update messages.
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.query.SubscriptionQuery get_initial_result = 3;</code>
     * @param \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery $var
     * @return $this
     */
    public function setGetInitialResult($var)
    {
        GPBUtil::checkMessage($var, \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Allows the Server to provide additional Updates to be sent. Only the `number_of_permits` field needs to be
     *set on this message.
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.query.SubscriptionQuery flow_control = 4;</code>
     * @return \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery
     */
    public function getFlowControl()
    {
        return $this->readOneof(4);
    }

    /**
     * Allows the Server to provide additional Updates to be sent. Only the `number_of_permits` field needs to be
     *set on this message.
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.query.SubscriptionQuery flow_control = 4;</code>
     * @param \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery $var
     * @return $this
     */
    public function setFlowControl($var)
    {
        GPBUtil::checkMessage($var, \Io\Axoniq\Axonserver\Grpc\Query\SubscriptionQuery::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getRequest()
    {
        return $this->whichOneof("request");
    }

}

