<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: event.proto

namespace Io\Axoniq\Axonserver\Grpc\Event;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request message to open an Event Stream from the Event Store. 
 *
 * Generated from protobuf message <code>io.axoniq.axonserver.grpc.event.GetEventsRequest</code>
 */
class GetEventsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The token to start streaming from 
     *
     * Generated from protobuf field <code>int64 tracking_token = 1;</code>
     */
    private $tracking_token = 0;
    /**
     * The number of messages the server may send before it needs to wait for more permits 
     *
     * Generated from protobuf field <code>int64 number_of_permits = 2;</code>
     */
    private $number_of_permits = 0;
    /**
     * The unique identifier of this client instance. Used for monitoring. 
     *
     * Generated from protobuf field <code>string client_id = 3;</code>
     */
    private $client_id = '';
    /**
     * The component name of this client instance. Used for monitoring. 
     *
     * Generated from protobuf field <code>string component_name = 4;</code>
     */
    private $component_name = '';
    /**
     * The name of the processor requesting this stream. Used for monitoring. 
     *
     * Generated from protobuf field <code>string processor = 5;</code>
     */
    private $processor = '';
    /**
     * An enumeration of payload types that need to be blacklisted. The Server will stop sending messages of these
     *types in order to reduce I/O. Note that the Server may occasionally send a blacklisted message to prevent
     *time-outs and stale tokens on clients.
     *
     * Generated from protobuf field <code>repeated .io.axoniq.axonserver.grpc.event.PayloadDescription blacklist = 6;</code>
     */
    private $blacklist;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $tracking_token
     *           The token to start streaming from 
     *     @type int|string $number_of_permits
     *           The number of messages the server may send before it needs to wait for more permits 
     *     @type string $client_id
     *           The unique identifier of this client instance. Used for monitoring. 
     *     @type string $component_name
     *           The component name of this client instance. Used for monitoring. 
     *     @type string $processor
     *           The name of the processor requesting this stream. Used for monitoring. 
     *     @type \Io\Axoniq\Axonserver\Grpc\Event\PayloadDescription[]|\Google\Protobuf\Internal\RepeatedField $blacklist
     *           An enumeration of payload types that need to be blacklisted. The Server will stop sending messages of these
     *          types in order to reduce I/O. Note that the Server may occasionally send a blacklisted message to prevent
     *          time-outs and stale tokens on clients.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Event::initOnce();
        parent::__construct($data);
    }

    /**
     * The token to start streaming from 
     *
     * Generated from protobuf field <code>int64 tracking_token = 1;</code>
     * @return int|string
     */
    public function getTrackingToken()
    {
        return $this->tracking_token;
    }

    /**
     * The token to start streaming from 
     *
     * Generated from protobuf field <code>int64 tracking_token = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTrackingToken($var)
    {
        GPBUtil::checkInt64($var);
        $this->tracking_token = $var;

        return $this;
    }

    /**
     * The number of messages the server may send before it needs to wait for more permits 
     *
     * Generated from protobuf field <code>int64 number_of_permits = 2;</code>
     * @return int|string
     */
    public function getNumberOfPermits()
    {
        return $this->number_of_permits;
    }

    /**
     * The number of messages the server may send before it needs to wait for more permits 
     *
     * Generated from protobuf field <code>int64 number_of_permits = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setNumberOfPermits($var)
    {
        GPBUtil::checkInt64($var);
        $this->number_of_permits = $var;

        return $this;
    }

    /**
     * The unique identifier of this client instance. Used for monitoring. 
     *
     * Generated from protobuf field <code>string client_id = 3;</code>
     * @return string
     */
    public function getClientId()
    {
        return $this->client_id;
    }

    /**
     * The unique identifier of this client instance. Used for monitoring. 
     *
     * Generated from protobuf field <code>string client_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setClientId($var)
    {
        GPBUtil::checkString($var, True);
        $this->client_id = $var;

        return $this;
    }

    /**
     * The component name of this client instance. Used for monitoring. 
     *
     * Generated from protobuf field <code>string component_name = 4;</code>
     * @return string
     */
    public function getComponentName()
    {
        return $this->component_name;
    }

    /**
     * The component name of this client instance. Used for monitoring. 
     *
     * Generated from protobuf field <code>string component_name = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setComponentName($var)
    {
        GPBUtil::checkString($var, True);
        $this->component_name = $var;

        return $this;
    }

    /**
     * The name of the processor requesting this stream. Used for monitoring. 
     *
     * Generated from protobuf field <code>string processor = 5;</code>
     * @return string
     */
    public function getProcessor()
    {
        return $this->processor;
    }

    /**
     * The name of the processor requesting this stream. Used for monitoring. 
     *
     * Generated from protobuf field <code>string processor = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setProcessor($var)
    {
        GPBUtil::checkString($var, True);
        $this->processor = $var;

        return $this;
    }

    /**
     * An enumeration of payload types that need to be blacklisted. The Server will stop sending messages of these
     *types in order to reduce I/O. Note that the Server may occasionally send a blacklisted message to prevent
     *time-outs and stale tokens on clients.
     *
     * Generated from protobuf field <code>repeated .io.axoniq.axonserver.grpc.event.PayloadDescription blacklist = 6;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getBlacklist()
    {
        return $this->blacklist;
    }

    /**
     * An enumeration of payload types that need to be blacklisted. The Server will stop sending messages of these
     *types in order to reduce I/O. Note that the Server may occasionally send a blacklisted message to prevent
     *time-outs and stale tokens on clients.
     *
     * Generated from protobuf field <code>repeated .io.axoniq.axonserver.grpc.event.PayloadDescription blacklist = 6;</code>
     * @param \Io\Axoniq\Axonserver\Grpc\Event\PayloadDescription[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setBlacklist($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Io\Axoniq\Axonserver\Grpc\Event\PayloadDescription::class);
        $this->blacklist = $arr;

        return $this;
    }

}

