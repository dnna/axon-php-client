<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: event.proto

namespace Io\Axoniq\Axonserver\Grpc\Event;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Message providing the parameters for executing a Query against AxonServer. 
 *
 * Generated from protobuf message <code>io.axoniq.axonserver.grpc.event.QueryEventsRequest</code>
 */
class QueryEventsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The query to execute against the Event Stream 
     *
     * Generated from protobuf field <code>string query = 1;</code>
     */
    private $query = '';
    /**
     * The number of results AxonServer may send before new permits need to be provided 
     *
     * Generated from protobuf field <code>int64 number_of_permits = 2;</code>
     */
    private $number_of_permits = 0;
    /**
     * Whether to keep the query running against incoming events once the Head of the Stream is reached 
     *
     * Generated from protobuf field <code>bool live_events = 3;</code>
     */
    private $live_events = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $query
     *           The query to execute against the Event Stream 
     *     @type int|string $number_of_permits
     *           The number of results AxonServer may send before new permits need to be provided 
     *     @type bool $live_events
     *           Whether to keep the query running against incoming events once the Head of the Stream is reached 
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Event::initOnce();
        parent::__construct($data);
    }

    /**
     * The query to execute against the Event Stream 
     *
     * Generated from protobuf field <code>string query = 1;</code>
     * @return string
     */
    public function getQuery()
    {
        return $this->query;
    }

    /**
     * The query to execute against the Event Stream 
     *
     * Generated from protobuf field <code>string query = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setQuery($var)
    {
        GPBUtil::checkString($var, True);
        $this->query = $var;

        return $this;
    }

    /**
     * The number of results AxonServer may send before new permits need to be provided 
     *
     * Generated from protobuf field <code>int64 number_of_permits = 2;</code>
     * @return int|string
     */
    public function getNumberOfPermits()
    {
        return $this->number_of_permits;
    }

    /**
     * The number of results AxonServer may send before new permits need to be provided 
     *
     * Generated from protobuf field <code>int64 number_of_permits = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setNumberOfPermits($var)
    {
        GPBUtil::checkInt64($var);
        $this->number_of_permits = $var;

        return $this;
    }

    /**
     * Whether to keep the query running against incoming events once the Head of the Stream is reached 
     *
     * Generated from protobuf field <code>bool live_events = 3;</code>
     * @return bool
     */
    public function getLiveEvents()
    {
        return $this->live_events;
    }

    /**
     * Whether to keep the query running against incoming events once the Head of the Stream is reached 
     *
     * Generated from protobuf field <code>bool live_events = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setLiveEvents($var)
    {
        GPBUtil::checkBool($var);
        $this->live_events = $var;

        return $this;
    }

}

