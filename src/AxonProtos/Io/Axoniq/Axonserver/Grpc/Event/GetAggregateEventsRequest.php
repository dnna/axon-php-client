<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: event.proto

namespace Io\Axoniq\Axonserver\Grpc\Event;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request describing the desire to read events for a specific Aggregate 
 *
 * Generated from protobuf message <code>io.axoniq.axonserver.grpc.event.GetAggregateEventsRequest</code>
 */
class GetAggregateEventsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The identifier of the aggregate to read events for 
     *
     * Generated from protobuf field <code>string aggregate_id = 1;</code>
     */
    private $aggregate_id = '';
    /**
     * The sequence number of the first event to receive 
     *
     * Generated from protobuf field <code>int64 initial_sequence = 2;</code>
     */
    private $initial_sequence = 0;
    /**
     * Whether a snapshot may be returned as first element in the stream 
     *
     * Generated from protobuf field <code>bool allow_snapshots = 3;</code>
     */
    private $allow_snapshots = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $aggregate_id
     *           The identifier of the aggregate to read events for 
     *     @type int|string $initial_sequence
     *           The sequence number of the first event to receive 
     *     @type bool $allow_snapshots
     *           Whether a snapshot may be returned as first element in the stream 
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Event::initOnce();
        parent::__construct($data);
    }

    /**
     * The identifier of the aggregate to read events for 
     *
     * Generated from protobuf field <code>string aggregate_id = 1;</code>
     * @return string
     */
    public function getAggregateId()
    {
        return $this->aggregate_id;
    }

    /**
     * The identifier of the aggregate to read events for 
     *
     * Generated from protobuf field <code>string aggregate_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setAggregateId($var)
    {
        GPBUtil::checkString($var, True);
        $this->aggregate_id = $var;

        return $this;
    }

    /**
     * The sequence number of the first event to receive 
     *
     * Generated from protobuf field <code>int64 initial_sequence = 2;</code>
     * @return int|string
     */
    public function getInitialSequence()
    {
        return $this->initial_sequence;
    }

    /**
     * The sequence number of the first event to receive 
     *
     * Generated from protobuf field <code>int64 initial_sequence = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setInitialSequence($var)
    {
        GPBUtil::checkInt64($var);
        $this->initial_sequence = $var;

        return $this;
    }

    /**
     * Whether a snapshot may be returned as first element in the stream 
     *
     * Generated from protobuf field <code>bool allow_snapshots = 3;</code>
     * @return bool
     */
    public function getAllowSnapshots()
    {
        return $this->allow_snapshots;
    }

    /**
     * Whether a snapshot may be returned as first element in the stream 
     *
     * Generated from protobuf field <code>bool allow_snapshots = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowSnapshots($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_snapshots = $var;

        return $this;
    }

}

