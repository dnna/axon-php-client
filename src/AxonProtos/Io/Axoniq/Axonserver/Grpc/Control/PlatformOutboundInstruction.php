<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: control.proto

namespace Io\Axoniq\Axonserver\Grpc\Control;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * An instruction or information from the AxonServer Platform to the Application Node 
 *
 * Generated from protobuf message <code>io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction</code>
 */
class PlatformOutboundInstruction extends \Google\Protobuf\Internal\Message
{
    protected $request;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Io\Axoniq\Axonserver\Grpc\Control\NodeInfo $node_notification
     *           Information provided by AxonServer which provides information about the AxonServer node the application is connected with 
     *     @type \Io\Axoniq\Axonserver\Grpc\Control\RequestReconnect $request_reconnect
     *           A request from AxonServer to the Application to migrate its connection to another node.
     *          Clients SHOULD honor this request by closing their current connection, and using the GetPlatformServer RPC
     *          to request a new destination.
     *     @type \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorReference $pause_event_processor
     *           Instruction from AxonServer to Pause a Tracking Event Processor. 
     *     @type \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorReference $start_event_processor
     *           Instruction from AxonServer to Start a Tracking Event Processor. 
     *     @type \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorSegmentReference $release_segment
     *           Instruction from AxonServer to Release a specific segment in a Tracking Event Processor 
     *     @type \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorReference $request_event_processor_info
     *           A request from AxonServer for status information of a specific Tracking Event Processor 
     *     @type \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorSegmentReference $split_event_processor_segment
     *           Instruction to split a Segment in a Tracking Event Processor 
     *     @type \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorSegmentReference $merge_event_processor_segment
     *           Instruction to merge two Segments in a Tracking Event Processor 
     *     @type \Io\Axoniq\Axonserver\Grpc\Control\Heartbeat $heartbeat
     *           This heartbeat is used by AxonFramework in order to check if the connection is still alive
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Control::initOnce();
        parent::__construct($data);
    }

    /**
     * Information provided by AxonServer which provides information about the AxonServer node the application is connected with 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.NodeInfo node_notification = 1;</code>
     * @return \Io\Axoniq\Axonserver\Grpc\Control\NodeInfo
     */
    public function getNodeNotification()
    {
        return $this->readOneof(1);
    }

    /**
     * Information provided by AxonServer which provides information about the AxonServer node the application is connected with 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.NodeInfo node_notification = 1;</code>
     * @param \Io\Axoniq\Axonserver\Grpc\Control\NodeInfo $var
     * @return $this
     */
    public function setNodeNotification($var)
    {
        GPBUtil::checkMessage($var, \Io\Axoniq\Axonserver\Grpc\Control\NodeInfo::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * A request from AxonServer to the Application to migrate its connection to another node.
     *Clients SHOULD honor this request by closing their current connection, and using the GetPlatformServer RPC
     *to request a new destination.
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.RequestReconnect request_reconnect = 3;</code>
     * @return \Io\Axoniq\Axonserver\Grpc\Control\RequestReconnect
     */
    public function getRequestReconnect()
    {
        return $this->readOneof(3);
    }

    /**
     * A request from AxonServer to the Application to migrate its connection to another node.
     *Clients SHOULD honor this request by closing their current connection, and using the GetPlatformServer RPC
     *to request a new destination.
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.RequestReconnect request_reconnect = 3;</code>
     * @param \Io\Axoniq\Axonserver\Grpc\Control\RequestReconnect $var
     * @return $this
     */
    public function setRequestReconnect($var)
    {
        GPBUtil::checkMessage($var, \Io\Axoniq\Axonserver\Grpc\Control\RequestReconnect::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Instruction from AxonServer to Pause a Tracking Event Processor. 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.EventProcessorReference pause_event_processor = 4;</code>
     * @return \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorReference
     */
    public function getPauseEventProcessor()
    {
        return $this->readOneof(4);
    }

    /**
     * Instruction from AxonServer to Pause a Tracking Event Processor. 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.EventProcessorReference pause_event_processor = 4;</code>
     * @param \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorReference $var
     * @return $this
     */
    public function setPauseEventProcessor($var)
    {
        GPBUtil::checkMessage($var, \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorReference::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Instruction from AxonServer to Start a Tracking Event Processor. 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.EventProcessorReference start_event_processor = 5;</code>
     * @return \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorReference
     */
    public function getStartEventProcessor()
    {
        return $this->readOneof(5);
    }

    /**
     * Instruction from AxonServer to Start a Tracking Event Processor. 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.EventProcessorReference start_event_processor = 5;</code>
     * @param \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorReference $var
     * @return $this
     */
    public function setStartEventProcessor($var)
    {
        GPBUtil::checkMessage($var, \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorReference::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Instruction from AxonServer to Release a specific segment in a Tracking Event Processor 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference release_segment = 6;</code>
     * @return \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorSegmentReference
     */
    public function getReleaseSegment()
    {
        return $this->readOneof(6);
    }

    /**
     * Instruction from AxonServer to Release a specific segment in a Tracking Event Processor 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference release_segment = 6;</code>
     * @param \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorSegmentReference $var
     * @return $this
     */
    public function setReleaseSegment($var)
    {
        GPBUtil::checkMessage($var, \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorSegmentReference::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * A request from AxonServer for status information of a specific Tracking Event Processor 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.EventProcessorReference request_event_processor_info = 7;</code>
     * @return \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorReference
     */
    public function getRequestEventProcessorInfo()
    {
        return $this->readOneof(7);
    }

    /**
     * A request from AxonServer for status information of a specific Tracking Event Processor 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.EventProcessorReference request_event_processor_info = 7;</code>
     * @param \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorReference $var
     * @return $this
     */
    public function setRequestEventProcessorInfo($var)
    {
        GPBUtil::checkMessage($var, \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorReference::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Instruction to split a Segment in a Tracking Event Processor 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference split_event_processor_segment = 8;</code>
     * @return \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorSegmentReference
     */
    public function getSplitEventProcessorSegment()
    {
        return $this->readOneof(8);
    }

    /**
     * Instruction to split a Segment in a Tracking Event Processor 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference split_event_processor_segment = 8;</code>
     * @param \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorSegmentReference $var
     * @return $this
     */
    public function setSplitEventProcessorSegment($var)
    {
        GPBUtil::checkMessage($var, \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorSegmentReference::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * Instruction to merge two Segments in a Tracking Event Processor 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference merge_event_processor_segment = 9;</code>
     * @return \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorSegmentReference
     */
    public function getMergeEventProcessorSegment()
    {
        return $this->readOneof(9);
    }

    /**
     * Instruction to merge two Segments in a Tracking Event Processor 
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference merge_event_processor_segment = 9;</code>
     * @param \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorSegmentReference $var
     * @return $this
     */
    public function setMergeEventProcessorSegment($var)
    {
        GPBUtil::checkMessage($var, \Io\Axoniq\Axonserver\Grpc\Control\EventProcessorSegmentReference::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * This heartbeat is used by AxonFramework in order to check if the connection is still alive
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 10;</code>
     * @return \Io\Axoniq\Axonserver\Grpc\Control\Heartbeat
     */
    public function getHeartbeat()
    {
        return $this->readOneof(10);
    }

    /**
     * This heartbeat is used by AxonFramework in order to check if the connection is still alive
     *
     * Generated from protobuf field <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 10;</code>
     * @param \Io\Axoniq\Axonserver\Grpc\Control\Heartbeat $var
     * @return $this
     */
    public function setHeartbeat($var)
    {
        GPBUtil::checkMessage($var, \Io\Axoniq\Axonserver\Grpc\Control\Heartbeat::class);
        $this->writeOneof(10, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getRequest()
    {
        return $this->whichOneof("request");
    }

}

